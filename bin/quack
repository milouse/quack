#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require_relative '../lib/l10n'
require_relative '../lib/quack/version'

params = { color: :auto, jail: :docker }
parser = OptionParser.new
parser.banner = <<~BANNER
  A Qualitative and Usable Aur paCKage helper

  Usage: quack -h
         quack -A [--devel] package [package ...]
         quack -A (-l, -u) [--devel]
         quack -A (-s, -i) package [package ...]
         quack -C (-l, -c)

  Commands
BANNER

parser.define_head(
  '-C', '--clean', L10n.t('cli.clean_help'), L10n.t('cli.clean_help_2')
) do
  raise L10n.t('cli.ca_mutually_exclusive') if params[:aur]

  params[:operation] = :clean
end
parser.define_head(
  '-A', '--aur', L10n.t('cli.aur_help'), L10n.t('cli.aur_help_2')
) do
  raise L10n.t('cli.ac_mutually_exclusive') if params[:clean]

  params[:operation] = :aur
end

parser.separator ''
parser.separator L10n.t('cli.shared_options_title')
parser.define('-v', '--version', L10n.t('cli.version_help')) do
  puts "quack - v#{Quack::VERSION}"
  exit
end
parser.define(
  '--color [WHEN]', %i[always never auto],
  L10n.t('cli.color_help'), L10n.t('cli.color_choices')
) { params[:color] = _1 }
parser.define(
  '-l', '--list', L10n.t('cli.list_help'), L10n.t('cli.list_help_2')
) { params[:action] = :list }

parser.separator ''
parser.separator L10n.t('cli.aur_actions_title')
parser.define('-i', '--info', L10n.t('cli.info_help')) do
  params[:action] = :info
end
parser.define('-s', '--search', L10n.t('cli.search_help')) do
  params[:action] = :search
end
parser.define('-u', '--upgrade', L10n.t('cli.upgrade_help')) do
  params[:action] = :upgrade
end

parser.separator ''
parser.separator L10n.t('cli.aur_options_title')
parser.define('--devel', L10n.t('cli.devel_help')) do
  params[:with_devel] = true
end
parser.define('--force', L10n.t('cli.force_help')) do
  params[:force] = true
end
parser.define(
  '-j', '--jail [JAIL]', %i[docker chroot],
  L10n.t('cli.jail_help'),
  L10n.t('cli.jail_choices')
) { params[:jail] = _1 }
parser.define('--no-jail', L10n.t('cli.no_jail_help')) do
  params[:jail] = :none
end
parser.define('-n', '--dry-run', L10n.t('cli.dry_run_help')) do
  params[:dry_run] = true
end

parser.separator ''
parser.separator L10n.t('cli.clean_actions_title')
parser.define('-c', '--do-clean', L10n.t('cli.do_clean_help')) do
  params[:action] = :purge
end

parser.separator ''
parser.separator L10n.t('cli.clean_options_title')
parser.define('-d', '--deep-search', L10n.t('cli.dsearch_help')) do
  params[:deep_search] = true
end

# rubocop:disable Layout/HeredocIndentation
parser.separator <<-FOOTER
     _         _
  __(.)>    __(.)<  Quack Quack
~~\\___)~~~~~\\___)~~~~~~~~~~~~~~~~~~
FOOTER
# rubocop:enable Layout/HeredocIndentation

begin
  argv = parser.parse!

  raise L10n.t('cli.ac_required') unless params.has_key?(:operation)
rescue RuntimeError => e
  warn e
  exit 2
end

if params[:operation] == :aur
  require_relative '../lib/quack/aur'
  aur = Quack::Aur.new(params)
  action = params[:action] || :install
  if %i[list upgrade].include?(action)
    aur.send action
  else
    aur.send action, argv
  end

elsif params[:operation] == :clean
  require_relative '../lib/quack/cleaner'
  cleaner = Quack::Cleaner.new(params)
  cleaner.send(params[:action] || :list)
end
